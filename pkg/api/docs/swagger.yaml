basePath: /v1
consumes:
- application/json
definitions:
  Gender:
    properties:
      female:
        type: boolean
        x-go-name: Female
      genderNonBinary:
        type: boolean
        x-go-name: GenderNonBinary
      male:
        type: boolean
        x-go-name: Male
      transgender:
        type: boolean
        x-go-name: Transgender
    type: object
    x-go-package: github.com/LensPlatform/BlackSpace/pkg/models
  Timestamp:
    description: |-
      All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
      second table is needed for interpretation, using a [24-hour linear
      smear](https://developers.google.com/time/smear).

      The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
      restricting to that range, we ensure that we can convert to and from [RFC
      3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

      # Examples

      Example 1: Compute Timestamp from POSIX `time()`.

      Timestamp timestamp;
      timestamp.set_seconds(time(NULL));
      timestamp.set_nanos(0);

      Example 2: Compute Timestamp from POSIX `gettimeofday()`.

      struct timeval tv;
      gettimeofday(&tv, NULL);

      Timestamp timestamp;
      timestamp.set_seconds(tv.tv_sec);
      timestamp.set_nanos(tv.tv_usec * 1000);

      Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

      FILETIME ft;
      GetSystemTimeAsFileTime(&ft);
      UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

      A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
      is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
      Timestamp timestamp;
      timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
      timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

      Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

      long millis = System.currentTimeMillis();

      Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
      .setNanos((int) ((millis % 1000) * 1000000)).build();


      Example 5: Compute Timestamp from current time in Python.

      timestamp = Timestamp()
      timestamp.GetCurrentTime()

      # JSON Mapping

      In JSON format, the Timestamp type is encoded as a string in the
      [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
      format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
      where {year} is always expressed using four digits while {month}, {day},
      {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
      seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
      are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
      is required. A proto3 JSON serializer should always use UTC (as indicated by
      "Z") when printing the Timestamp type and a proto3 JSON parser should be
      able to accept both UTC and other timezones (as indicated by an offset).

      For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
      01:30 UTC on January 15, 2017.

      In JavaScript, one can convert a Date object to this format using the
      standard
      [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
      method. In Python, a standard `datetime.datetime` object can be converted
      to this format using
      [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
      the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
      the Joda Time's [`ISODateTimeFormat.dateTime()`](
      http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D
      ) to obtain a formatter capable of generating timestamps in this format.
    properties:
      nanos:
        description: |-
          Non-negative fractions of a second at nanosecond resolution. Negative
          second values with fractions must still have non-negative nanos values
          that count forward in time. Must be from 0 to 999,999,999
          inclusive.
        format: int32
        type: integer
        x-go-name: Nanos
      seconds:
        description: |-
          Represents seconds of UTC time since Unix epoch
          1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
          9999-12-31T23:59:59Z inclusive.
        format: int64
        type: integer
        x-go-name: Seconds
    title: |-
      A Timestamp represents a point in time independent of any time zone or local
      calendar, encoded as a count of seconds and fractions of seconds at
      nanosecond resolution. The count is relative to an epoch at UTC midnight on
      January 1, 1970, in the proleptic Gregorian calendar which extends the
      Gregorian calendar backwards to year one.
    type: object
    x-go-package: google.golang.org/protobuf/types/known/timestamppb
  User:
    properties:
      birthDate:
        type: string
        x-go-name: BirthDate
      created_at:
        $ref: '#/definitions/Timestamp'
      deleted_at:
        $ref: '#/definitions/Timestamp'
      email:
        type: string
        x-go-name: Email
      firstName:
        type: string
        x-go-name: FirstName
      gender:
        $ref: '#/definitions/Gender'
      id:
        format: uint32
        type: integer
        x-go-name: Id
      isActive:
        type: boolean
        x-go-name: IsActive
      isOnline:
        type: boolean
        x-go-name: IsOnline
      lastName:
        type: string
        x-go-name: LastName
      password:
        type: string
        x-go-name: Password
      updated_at:
        $ref: '#/definitions/Timestamp'
      username:
        type: string
        x-go-name: Username
    type: object
    x-go-package: github.com/LensPlatform/BlackSpace/pkg/models
  UserORM:
    properties:
      BirthDate:
        type: string
      CreatedAt:
        format: date-time
        type: string
      DeletedAt:
        format: date-time
        type: string
      Email:
        type: string
      FirstName:
        type: string
      Id:
        format: uint32
        type: integer
      IsActive:
        type: boolean
      IsOnline:
        type: boolean
      LastName:
        type: string
      Password:
        type: string
      UpdatedAt:
        format: date-time
        type: string
      Username:
        type: string
    type: object
    x-go-package: github.com/LensPlatform/BlackSpace/pkg/models
host: localhost
info:
  contact:
    email: yoanyombapro@gmail.com.com
    name: Yoan Yomba
    url: http://CUBE.com
  description: This serves as the user's microservice api definition for the CUBE
    Platform
  license:
    name: MIT
    url: http://opensource.org/licenses/MIT
  termsOfService: there are no TOS at this moment, use at your own risk we take no
    responsibility
  title: Backend API.
  version: 1.0.0
paths:
  /v1/user/{id}:
    delete:
      consumes:
      - application/json
      - application/x-protobuf
      description: Updates a user account present in the backend database
      operationId: deleteUser
      parameters:
      - description: id of the user account to delete
        format: uint32
        in: query
        name: result
        required: true
        type: integer
        x-go-name: Id
      produces:
      - application/json
      - application/x-protobuf
      responses:
        "200":
          $ref: '#/responses/operationResponse'
      schemes:
      - http
      - https
      - ws
      - wss
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Delete User Account
      tags:
      - User
    get:
      consumes:
      - application/json
      - application/x-protobuf
      description: Returns a user account by id
      operationId: getUserRequest
      parameters:
      - description: user account to create
        in: body
        name: Body
        schema:
          properties:
            result:
              description: |-
                id of the user account to get
                in: query
              format: uint32
              type: integer
              x-go-name: Id
          required:
          - result
          type: object
      produces:
      - application/json
      - application/x-protobuf
      responses:
        "200":
          $ref: '#/responses/getUserResponse'
      schemes:
      - http
      - https
      - ws
      - wss
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Get User Account By ID
      tags:
      - User
    put:
      consumes:
      - application/json
      - application/x-protobuf
      description: Updates a user account present in the backend database
      operationId: updateSwaggerUser
      parameters:
      - description: user account to create
        in: body
        name: Body
        schema:
          properties:
            result:
              $ref: '#/definitions/User'
          required:
          - result
          type: object
      - description: user id of account to update
        format: uint32
        in: query
        name: UserAccountId
        type: integer
      produces:
      - application/json
      - application/x-protobuf
      responses:
        "200":
          $ref: '#/responses/operationResponse'
      schemes:
      - http
      - https
      - ws
      - wss
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Update User Account
      tags:
      - User
  /v1/user/login:
    post:
      consumes:
      - application/json
      - application/x-protobuf
      description: Logs in a user into the system
      operationId: loginUserRequest
      parameters:
      - in: body
        name: Body
        schema:
          properties:
            password:
              description: password
              example: test-password
              type: string
              x-go-name: Password
            username:
              description: user name
              example: test-username
              type: string
              x-go-name: Username
          required:
          - username
          - password
          type: object
      produces:
      - application/json
      - application/x-protobuf
      responses:
        "200":
          $ref: '#/responses/loginUserResponse'
      schemes:
      - http
      - https
      - ws
      - wss
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Log in user
      tags:
      - User
  /v1/user/signup:
    post:
      consumes:
      - application/json
      - application/x-protobuf
      description: creates a user account object in the backend database
      operationId: signUpUserReq
      parameters:
      - in: body
        name: Body
        schema:
          properties:
            user:
              $ref: '#/definitions/User'
          required:
          - user
          type: object
      produces:
      - application/json
      - application/x-protobuf
      responses:
        "200":
          $ref: '#/responses/signUpResp'
        "400":
          $ref: '#/responses/genericError'
        "401":
          $ref: '#/responses/genericError'
        "403":
          $ref: '#/responses/genericError'
        "404":
          $ref: '#/responses/genericError'
        "406":
          $ref: '#/responses/genericError'
        "500":
          $ref: '#/responses/genericError'
      schemes:
      - http
      - https
      - ws
      - wss
      security:
      - api_key: []
      - oauth:
        - read
        - write
      summary: Sign Up User
      tags:
      - User
produces:
- application/json
responses:
  genericError:
    description: Error occured during request lifecycle
    schema:
      properties:
        error:
          description: error
          type: string
          x-go-name: Error
      required:
      - error
      type: object
  getUserResponse:
    description: Common operation response
    schema:
      properties:
        error:
          description: error
          example: error occured while processing request
          type: string
          x-go-name: Error
        user:
          $ref: '#/definitions/UserORM'
      required:
      - error
      - user
      type: object
  loginUserResponse:
    schema:
      properties:
        error:
          description: error
          example: unable to get token
          type: string
          x-go-name: Error
        token:
          description: Jwt Token
          example: kBxbjzKVDjvasgvds.askdhjaskjdgsagjcdgc.asjdjkasfgdas
          type: string
          x-go-name: JwtToken
      required:
      - token
      - error
      type: object
  operationResponse:
    description: Common operation response
    schema:
      properties:
        error:
          description: error
          example: error occured while processing request
          type: string
          x-go-name: Error
      required:
      - error
      type: object
  signUpResp:
    description: User Successfully signed up
    schema:
      properties:
        error:
          description: error
          example: user already exists
          type: string
          x-go-name: Error
        id:
          description: user account id
          example: 20
          format: uint32
          type: integer
          x-go-name: Id
        jwt:
          description: JWT Token
          example: askhdkjashjd.sajkhdjashjfdsa.askjdhjkashdja
          type: string
          x-go-name: JwtToken
      required:
      - id
      - error
      - jwt
      type: object
schemes:
- http
- https
security:
- api_key: []
swagger: "2.0"
x-meta-array:
- value1
- value2
x-meta-array-obj:
- name: obj
  value: field
x-meta-value: value
